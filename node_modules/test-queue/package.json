{
  "name": "test-queue",
  "description": "Simple test framework using Promises",
  "version": "0.1.0",
  "license": "MIT",
  "author": {
    "name": "Daniel Lewis"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mrdaniellewis/node-test-queue.git"
  },
  "dependencies": {
    "promise-polyfill": "^1.1.2",
    "console-style": "^0.1"
  },
  "scripts": {
    "test": "node test"
  },
  "readme": "# Test queue\n\nSimple test framework that allows you to queue up a sequence of async tests.\n\n## Usage\n\n```javascript\nvar TestQueue = require('test-queue');\n\nnew TestQueue()\n\t.addTest( function( pass, fail ) {\n\t\t// Async task\n\t} )\n\t.addTest( function( pass, fail ) {\n\t\t// Async task\n\t} )\n\t.setup( function() {\n\t\t// function run before the tests start\n\t} )\n\t.teardown( function() {\n\t\t// function run after all the tests have finished whether they pass or fail\n\t} )\n\t.on( 'pass', function(name) {\n\t\tconsole.log( name, ' has passed' );\n\t} )\n\t.on( 'fail', function( name, e ) {\n\t\tconsole.log( name, ' has failed with error', e );\n\t} )\n\t.run()\n\t\t.then( \n\t\t\tfunction(stats) {\n\t\t\t\tconsole.log( 'All tests passed')\n\t\t\t},\n\t\t\tfunction(stats) {\n\t\t\t\tconsole.log( 'Some tests did\\'t pass ');\n\t\t\t}\n\t\t);\n```\n\n### Constructor\n\n```javascript\nvar testQueue = new TestQueue(options) \n```\n\n`options.stopOnFail` - Boolean, optional, default = `true`.  Stop running tests if a test fails.\n\ntestQueue is an event emitter.\n\n### Events\n\n`pass` A test has passed.  The name of the test is passed as the first argument\n\n`fail` A test has failed.  The name of the test is passed as the first argument and the error message as the second.\n\n### Methods\n\n```javascript\ntestQueue.addTest( name, function(pass,fail){\n\t// The test goes here\n} )\n```\n\n`name` - String - The name of the test\n\n`function(pass,fail){}` - Function - The test.  Use the callbacks pass and fail to return the outcome of the test.  Pass an error to fail.\n\nIf the function throws an uncaught error this will be caught and the test will be failed.\n\nReturns the `TestQueue` object for chaining\n\n----\n\n```javascript\ntestQueue.setup( function(){\n\t// Setup tasks\n} )\n```\nThe setup function is run before all tests.\nReturn a Promise object if setup is async.\n\n----\n\n```javascript\ntestQueue.teardown( function(){\n\t// Teardown tasks\n} )\n```\nThe teardown function is run after all tests have finished\nwhether they passed or failed.\n\nReturn a Promise object if teardown is async.\n\n\n----\n\n```javascript\ntestQueue.run()\n```\n\nRun the queued tests.\n\nReturns a promise.\n\nThe promise will resolve or reject with a object with the properties\n\n* `total`: total number of tests\n* `passed`: number of tests passed\n* `failed`: number of tests failed\n\n### Static methods\n\n```javascript\nTestQueue.toConsole(testQueue)\n```\n\nModifies an existing instance of TestQueue so it outputs to the console\neach time a test passes or fails and the statistics when the tests finish.\n\nOutput is coloured red and green as appropriate.\n\n\n\n",
  "readmeFilename": "README.md",
  "gitHead": "81af196a0dcee133127ed19855adaa48f55aab9c",
  "bugs": {
    "url": "https://github.com/mrdaniellewis/node-test-queue/issues"
  },
  "homepage": "https://github.com/mrdaniellewis/node-test-queue",
  "_id": "test-queue@0.1.0",
  "_shasum": "94e233499bd2bc7ec86dcc213ac78b6a35cf1743",
  "_from": "test-queue@^0.1"
}
